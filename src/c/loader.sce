// This file is released under the 3-clause BSD license. See COPYING-BSD.
// Generated by builder.sce : Please, do not edit this file
// ----------------------------------------------------------------------------
//
if ~win64() then
  warning(_("This module requires a Windows x64 platform."));
  return
end
//
gettnum_path = get_absolute_file_path('loader.sce');
//
// ulink previous function with same name
[bOK, ilib] = c_link('gettnum');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('settnum');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('get_thread_num');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('get_max_threads');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('getnumprocs');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('omp');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('wtime');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('get_dynamic');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('set_dynamic');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('get_max_active_levels');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('set_max_active_levels');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('get_nested');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('set_nested');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('get_num_teams');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('get_team_num');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('mat_mul');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('critical');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('single');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('master');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('get_level');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('get_active_level');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('get_thread_limit');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('in_parallel');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('init_lock');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('set_lock');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('unset_lock');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('destroy_lock');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('team');
if bOK then
  ulink(ilib);
end
//
link('C:\Users\SRP\gcc\x86_64-w64-mingw32\bin\..\..\lib\libgomp' + getdynlibext());
link(gettnum_path + 'libgettnum' + getdynlibext(), ['gettnum','settnum','get_thread_num','get_max_threads','getnumprocs','omp','wtime','get_dynamic','set_dynamic','get_max_active_levels','set_max_active_levels','get_nested','set_nested','get_num_teams','get_team_num','mat_mul','critical','single','master','get_level','get_active_level','get_thread_limit','in_parallel','init_lock','set_lock','unset_lock','destroy_lock','team'],'c');
// remove temp. variables on stack
clear gettnum_path;
clear bOK;
clear ilib;
// ----------------------------------------------------------------------------
